const fs = require('fs')
const path = require('path')

//=========================================
//СОЗДАНИЕ НОВОЙ ПАПКИ
//Первый параметр - путь к новой папке. Второй параметр принимается, как callback
//когда работаешь с асинхронными параметрами, в колбеке ВСЕГДА первый параметр - это ошибка (err)
// fs.mkdir(path.join(__dirname, 'test'), (err,) => {
// 	if (err) {
// 		throw err // throw выбрасывает ошибку, если if получит её. Если ошибки нет, то все сработает
// 	}
// 	console.log('Папка сздана')
// })
//=========================================
//СОЗДАНИЕ НОВОГО ФАЙЛА
//
const filePath = path.join(__dirname, 'test', 'text.txt')
//
// //данный метод при повторном примененнии, полностью перезаписывает уже существующие файлы и их контент
// fs.writeFile(filePath, 'Hello home', (err) => {
// 	if (err) {
// 		throw err
// 	}
// 	console.log('Файл создан')
// })
//
// //Этот метод добавляет контент в уже существующий файл
// fs.appendFile(filePath, '\ngo to work', (err) => {
// 	if (err) {
// 		throw err
// 	}
// 	console.log('Файл создан')
// })
//=========================================
//ЧТЕНИЕ ДАННЫХ ФАЙЛА
//изначально, метод контент будет возвращать данные буфера. Чтобы преобразовать его в строку, можно вторым параметром передать строку с одировкой 'utf8'
fs.readFile(filePath, 'utf8',(err, content) => {
	if (err) {
		throw err
	}
	console.log(content)
	//Это ещё один способ преобразования данных буфера в строку
	// const data = Buffer.from(content)
	// console.log('Content: ', data.toString())
})